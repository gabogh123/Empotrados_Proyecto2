/*
  Â© 2016 Intel Corporation
*/

// This is an incomplete X device module to learn how to translate 
//specifications to dml code. 

dml 1.4;

device x_device;

param desc = "example X device";

param documentation =
    "X device incomplete for dml workshop. Find the specification "
    + "on the documentation";

import "utility.dml";


//Libraries for interfaces
import "simics/devs/signal.dml";
import "simics/devs/memory-space.dml";
import "../control_Device_PCI-interface/control_Device_PCI-interface.dml";

header %{
#include <stdio.h>
#include <stdlib.h>
%}

extern FILE * fopen(const char *, const char *);
extern int fgetc(FILE *);
extern int ftell(FILE *);
extern int fclose(FILE *);
extern int fseek(FILE *,  int, int);
extern typedef struct { } FILE;


param BUFFER_SIZE = 256;
session FILE * file;

param byte_order = "little-endian";
param path_img = "img.bmp";

// Memory-space connection
connect target_mem_space {
    param documentation =
        "The memory space on which the X device operates. Data will be "
        + "read from and copied to the memory associated with this memory "
        + "space.";
    param configuration = "required";
    interface memory_space;
}


/*
    simulates input data received by the device
    recieves a path to the file that will be populate in this device registers
*/

attribute img_path {
    param type = "s";
    session char* val;
    session int len;
    //get handler, gets called with called from CLI or the get interface
    method get() -> (attr_value_t) default {
        return SIM_make_attr_string(val != NULL ? val : "");
      
    }

    //set handler, gets called with called from CLI or the set interface
    method set(attr_value_t attr) throws default {
        local const char* attr_str = SIM_attr_string(attr);
        set_string(attr_str);

    }

    /* 
        set_string: copies the parmater char * to the internal char structure
        the old stored value is deleted 
    */
    method set_string(const char *ptr) {
        if (len > 0) {delete val;}
        len = strlen(ptr);
        val = new char[len + 1];
        strcpy(val, ptr);
    }
} 

bank regs is function_mapped_bank{

    param function = 1;
    param register_size = 4;
    param register_buffer_size = 1;

    register buffer_size size register_size @ 0x00{
        is read;
        is write;
        param init_val = 0x0;
    }

    register cmd size register_size @ 0x04{
        is write;
        is read;
        param init_val = 0x00;
        method write(uint64 value){
            log info, 4: "writting %d in cmd", value;
            default(value);
            if (value == 0x1){
                open_file();
            } else if (value == 0x2){
                read_file();
            }
        }
    }

    register file_size size register_size @ 0x08{
        is read_only;
        param init_val = 0x00;
    }

    register file_offset size register_size @ 0x12{
        is read;
        is write;
        param init_val = 0x00;
    }

    register buffer[i < BUFFER_SIZE] size register_buffer_size @ i + 0x16{
        is read_only;
        param init_val = 0x00;
    }

    method open_file(){
        if(img_path.val != NULL){
            file_offset.set_val(0);
            file = fopen(img_path.val, "rb");
            fseek(file, 0, 2);
            local uint32 size_img = ftell(file);
            fseek(file, 0, 0);
            file_size.val = size_img;
            log info, 4: "Img size = %d", size_img;
            fclose(file);
        } else{
            log error, 4: "No img path";
        }
    }

    method read_file(){
        file = fopen(img_path.val, "rb");
        fseek(file, file_offset.val, 0);
        for (local uint32 index = 0; index < 256 && index + file_offset.val < file_size.val; index++) {
            local uint8 char_read = fgetc(file);
            buffer[index].set_val(char_read);
            buffer_size.set_val(buffer_size.get() + 1);
            if(index < 15){
                log info, 3: "Value buffer loaded = 0x%x @ buffer[%d]", char_read, index;
            }
        }
        file_offset.set_val(file_offset.get_val()  + 256);
        fclose(file);
    }


}

implement control_Device_PCI {

    method start_read(uint32 value){
        log info, 4: "Device Interface in start_read %d", value;
        regs.cmd.write(value);
    }

    method read_buffer(uint16 index) -> (uint16){
        return regs.buffer[index].get_val();
    }

    method move_offeset(){
        regs.cmd.write(0x2);
    }

    method read_file_size() -> (uint32){
        return regs.file_size.get_val();
    }

}
